/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.jvmprofiler;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class memoryPools extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 509513799526776405L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"memoryPools\",\"namespace\":\"com.jvmprofiler\",\"fields\":[{\"name\":\"peakUsageMax\",\"type\":\"long\"},{\"name\":\"usageMax\",\"type\":\"long\"},{\"name\":\"peakUsageUsed\",\"type\":\"long\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"peakUsageCommitted\",\"type\":\"long\"},{\"name\":\"usageUsed\",\"type\":\"long\"},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"usageCommitted\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<memoryPools> ENCODER =
      new BinaryMessageEncoder<memoryPools>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<memoryPools> DECODER =
      new BinaryMessageDecoder<memoryPools>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<memoryPools> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<memoryPools> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<memoryPools>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this memoryPools to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a memoryPools from a ByteBuffer. */
  public static memoryPools fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long peakUsageMax;
   private long usageMax;
   private long peakUsageUsed;
   private java.lang.String name;
   private long peakUsageCommitted;
   private long usageUsed;
   private java.lang.String type;
   private long usageCommitted;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public memoryPools() {}

  /**
   * All-args constructor.
   * @param peakUsageMax The new value for peakUsageMax
   * @param usageMax The new value for usageMax
   * @param peakUsageUsed The new value for peakUsageUsed
   * @param name The new value for name
   * @param peakUsageCommitted The new value for peakUsageCommitted
   * @param usageUsed The new value for usageUsed
   * @param type The new value for type
   * @param usageCommitted The new value for usageCommitted
   */
  public memoryPools(java.lang.Long peakUsageMax, java.lang.Long usageMax, java.lang.Long peakUsageUsed, java.lang.String name, java.lang.Long peakUsageCommitted, java.lang.Long usageUsed, java.lang.String type, java.lang.Long usageCommitted) {
    this.peakUsageMax = peakUsageMax;
    this.usageMax = usageMax;
    this.peakUsageUsed = peakUsageUsed;
    this.name = name;
    this.peakUsageCommitted = peakUsageCommitted;
    this.usageUsed = usageUsed;
    this.type = type;
    this.usageCommitted = usageCommitted;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return peakUsageMax;
    case 1: return usageMax;
    case 2: return peakUsageUsed;
    case 3: return name;
    case 4: return peakUsageCommitted;
    case 5: return usageUsed;
    case 6: return type;
    case 7: return usageCommitted;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: peakUsageMax = (java.lang.Long)value$; break;
    case 1: usageMax = (java.lang.Long)value$; break;
    case 2: peakUsageUsed = (java.lang.Long)value$; break;
    case 3: name = (java.lang.String)value$; break;
    case 4: peakUsageCommitted = (java.lang.Long)value$; break;
    case 5: usageUsed = (java.lang.Long)value$; break;
    case 6: type = (java.lang.String)value$; break;
    case 7: usageCommitted = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'peakUsageMax' field.
   * @return The value of the 'peakUsageMax' field.
   */
  public java.lang.Long getPeakUsageMax() {
    return peakUsageMax;
  }


  /**
   * Gets the value of the 'usageMax' field.
   * @return The value of the 'usageMax' field.
   */
  public java.lang.Long getUsageMax() {
    return usageMax;
  }


  /**
   * Gets the value of the 'peakUsageUsed' field.
   * @return The value of the 'peakUsageUsed' field.
   */
  public java.lang.Long getPeakUsageUsed() {
    return peakUsageUsed;
  }


  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Gets the value of the 'peakUsageCommitted' field.
   * @return The value of the 'peakUsageCommitted' field.
   */
  public java.lang.Long getPeakUsageCommitted() {
    return peakUsageCommitted;
  }


  /**
   * Gets the value of the 'usageUsed' field.
   * @return The value of the 'usageUsed' field.
   */
  public java.lang.Long getUsageUsed() {
    return usageUsed;
  }


  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.String getType() {
    return type;
  }


  /**
   * Gets the value of the 'usageCommitted' field.
   * @return The value of the 'usageCommitted' field.
   */
  public java.lang.Long getUsageCommitted() {
    return usageCommitted;
  }


  /**
   * Creates a new memoryPools RecordBuilder.
   * @return A new memoryPools RecordBuilder
   */
  public static com.jvmprofiler.memoryPools.Builder newBuilder() {
    return new com.jvmprofiler.memoryPools.Builder();
  }

  /**
   * Creates a new memoryPools RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new memoryPools RecordBuilder
   */
  public static com.jvmprofiler.memoryPools.Builder newBuilder(com.jvmprofiler.memoryPools.Builder other) {
    return new com.jvmprofiler.memoryPools.Builder(other);
  }

  /**
   * Creates a new memoryPools RecordBuilder by copying an existing memoryPools instance.
   * @param other The existing instance to copy.
   * @return A new memoryPools RecordBuilder
   */
  public static com.jvmprofiler.memoryPools.Builder newBuilder(com.jvmprofiler.memoryPools other) {
    return new com.jvmprofiler.memoryPools.Builder(other);
  }

  /**
   * RecordBuilder for memoryPools instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<memoryPools>
    implements org.apache.avro.data.RecordBuilder<memoryPools> {

    private long peakUsageMax;
    private long usageMax;
    private long peakUsageUsed;
    private java.lang.String name;
    private long peakUsageCommitted;
    private long usageUsed;
    private java.lang.String type;
    private long usageCommitted;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.jvmprofiler.memoryPools.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.peakUsageMax)) {
        this.peakUsageMax = data().deepCopy(fields()[0].schema(), other.peakUsageMax);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.usageMax)) {
        this.usageMax = data().deepCopy(fields()[1].schema(), other.usageMax);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.peakUsageUsed)) {
        this.peakUsageUsed = data().deepCopy(fields()[2].schema(), other.peakUsageUsed);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.peakUsageCommitted)) {
        this.peakUsageCommitted = data().deepCopy(fields()[4].schema(), other.peakUsageCommitted);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.usageUsed)) {
        this.usageUsed = data().deepCopy(fields()[5].schema(), other.usageUsed);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.type)) {
        this.type = data().deepCopy(fields()[6].schema(), other.type);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.usageCommitted)) {
        this.usageCommitted = data().deepCopy(fields()[7].schema(), other.usageCommitted);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing memoryPools instance
     * @param other The existing instance to copy.
     */
    private Builder(com.jvmprofiler.memoryPools other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.peakUsageMax)) {
        this.peakUsageMax = data().deepCopy(fields()[0].schema(), other.peakUsageMax);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.usageMax)) {
        this.usageMax = data().deepCopy(fields()[1].schema(), other.usageMax);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.peakUsageUsed)) {
        this.peakUsageUsed = data().deepCopy(fields()[2].schema(), other.peakUsageUsed);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.peakUsageCommitted)) {
        this.peakUsageCommitted = data().deepCopy(fields()[4].schema(), other.peakUsageCommitted);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.usageUsed)) {
        this.usageUsed = data().deepCopy(fields()[5].schema(), other.usageUsed);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.type)) {
        this.type = data().deepCopy(fields()[6].schema(), other.type);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.usageCommitted)) {
        this.usageCommitted = data().deepCopy(fields()[7].schema(), other.usageCommitted);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'peakUsageMax' field.
      * @return The value.
      */
    public java.lang.Long getPeakUsageMax() {
      return peakUsageMax;
    }

    /**
      * Sets the value of the 'peakUsageMax' field.
      * @param value The value of 'peakUsageMax'.
      * @return This builder.
      */
    public com.jvmprofiler.memoryPools.Builder setPeakUsageMax(long value) {
      validate(fields()[0], value);
      this.peakUsageMax = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'peakUsageMax' field has been set.
      * @return True if the 'peakUsageMax' field has been set, false otherwise.
      */
    public boolean hasPeakUsageMax() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'peakUsageMax' field.
      * @return This builder.
      */
    public com.jvmprofiler.memoryPools.Builder clearPeakUsageMax() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'usageMax' field.
      * @return The value.
      */
    public java.lang.Long getUsageMax() {
      return usageMax;
    }

    /**
      * Sets the value of the 'usageMax' field.
      * @param value The value of 'usageMax'.
      * @return This builder.
      */
    public com.jvmprofiler.memoryPools.Builder setUsageMax(long value) {
      validate(fields()[1], value);
      this.usageMax = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'usageMax' field has been set.
      * @return True if the 'usageMax' field has been set, false otherwise.
      */
    public boolean hasUsageMax() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'usageMax' field.
      * @return This builder.
      */
    public com.jvmprofiler.memoryPools.Builder clearUsageMax() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'peakUsageUsed' field.
      * @return The value.
      */
    public java.lang.Long getPeakUsageUsed() {
      return peakUsageUsed;
    }

    /**
      * Sets the value of the 'peakUsageUsed' field.
      * @param value The value of 'peakUsageUsed'.
      * @return This builder.
      */
    public com.jvmprofiler.memoryPools.Builder setPeakUsageUsed(long value) {
      validate(fields()[2], value);
      this.peakUsageUsed = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'peakUsageUsed' field has been set.
      * @return True if the 'peakUsageUsed' field has been set, false otherwise.
      */
    public boolean hasPeakUsageUsed() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'peakUsageUsed' field.
      * @return This builder.
      */
    public com.jvmprofiler.memoryPools.Builder clearPeakUsageUsed() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.jvmprofiler.memoryPools.Builder setName(java.lang.String value) {
      validate(fields()[3], value);
      this.name = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.jvmprofiler.memoryPools.Builder clearName() {
      name = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'peakUsageCommitted' field.
      * @return The value.
      */
    public java.lang.Long getPeakUsageCommitted() {
      return peakUsageCommitted;
    }

    /**
      * Sets the value of the 'peakUsageCommitted' field.
      * @param value The value of 'peakUsageCommitted'.
      * @return This builder.
      */
    public com.jvmprofiler.memoryPools.Builder setPeakUsageCommitted(long value) {
      validate(fields()[4], value);
      this.peakUsageCommitted = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'peakUsageCommitted' field has been set.
      * @return True if the 'peakUsageCommitted' field has been set, false otherwise.
      */
    public boolean hasPeakUsageCommitted() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'peakUsageCommitted' field.
      * @return This builder.
      */
    public com.jvmprofiler.memoryPools.Builder clearPeakUsageCommitted() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'usageUsed' field.
      * @return The value.
      */
    public java.lang.Long getUsageUsed() {
      return usageUsed;
    }

    /**
      * Sets the value of the 'usageUsed' field.
      * @param value The value of 'usageUsed'.
      * @return This builder.
      */
    public com.jvmprofiler.memoryPools.Builder setUsageUsed(long value) {
      validate(fields()[5], value);
      this.usageUsed = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'usageUsed' field has been set.
      * @return True if the 'usageUsed' field has been set, false otherwise.
      */
    public boolean hasUsageUsed() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'usageUsed' field.
      * @return This builder.
      */
    public com.jvmprofiler.memoryPools.Builder clearUsageUsed() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.String getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.jvmprofiler.memoryPools.Builder setType(java.lang.String value) {
      validate(fields()[6], value);
      this.type = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.jvmprofiler.memoryPools.Builder clearType() {
      type = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'usageCommitted' field.
      * @return The value.
      */
    public java.lang.Long getUsageCommitted() {
      return usageCommitted;
    }

    /**
      * Sets the value of the 'usageCommitted' field.
      * @param value The value of 'usageCommitted'.
      * @return This builder.
      */
    public com.jvmprofiler.memoryPools.Builder setUsageCommitted(long value) {
      validate(fields()[7], value);
      this.usageCommitted = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'usageCommitted' field has been set.
      * @return True if the 'usageCommitted' field has been set, false otherwise.
      */
    public boolean hasUsageCommitted() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'usageCommitted' field.
      * @return This builder.
      */
    public com.jvmprofiler.memoryPools.Builder clearUsageCommitted() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public memoryPools build() {
      try {
        memoryPools record = new memoryPools();
        record.peakUsageMax = fieldSetFlags()[0] ? this.peakUsageMax : (java.lang.Long) defaultValue(fields()[0]);
        record.usageMax = fieldSetFlags()[1] ? this.usageMax : (java.lang.Long) defaultValue(fields()[1]);
        record.peakUsageUsed = fieldSetFlags()[2] ? this.peakUsageUsed : (java.lang.Long) defaultValue(fields()[2]);
        record.name = fieldSetFlags()[3] ? this.name : (java.lang.String) defaultValue(fields()[3]);
        record.peakUsageCommitted = fieldSetFlags()[4] ? this.peakUsageCommitted : (java.lang.Long) defaultValue(fields()[4]);
        record.usageUsed = fieldSetFlags()[5] ? this.usageUsed : (java.lang.Long) defaultValue(fields()[5]);
        record.type = fieldSetFlags()[6] ? this.type : (java.lang.String) defaultValue(fields()[6]);
        record.usageCommitted = fieldSetFlags()[7] ? this.usageCommitted : (java.lang.Long) defaultValue(fields()[7]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<memoryPools>
    WRITER$ = (org.apache.avro.io.DatumWriter<memoryPools>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<memoryPools>
    READER$ = (org.apache.avro.io.DatumReader<memoryPools>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
