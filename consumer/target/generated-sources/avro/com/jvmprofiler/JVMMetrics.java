/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.jvmprofiler;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class JVMMetrics extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7382055174533738677L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"JVMMetrics\",\"namespace\":\"com.jvmprofiler\",\"fields\":[{\"name\":\"nonHeapMemoryTotalUsed\",\"type\":\"double\"},{\"name\":\"bufferPools\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bufferPools\",\"fields\":[{\"name\":\"totalCapacity\",\"type\":\"long\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"count\",\"type\":\"long\"},{\"name\":\"memoryUsed\",\"type\":\"long\"}]}}},{\"name\":\"heapMemoryTotalUsed\",\"type\":\"double\"},{\"name\":\"epochMillis\",\"type\":\"long\"},{\"name\":\"nonHeapMemoryCommitted\",\"type\":\"double\"},{\"name\":\"heapMemoryCommitted\",\"type\":\"double\"},{\"name\":\"memoryPools\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"memoryPools\",\"fields\":[{\"name\":\"peakUsageMax\",\"type\":\"long\"},{\"name\":\"usageMax\",\"type\":\"long\"},{\"name\":\"peakUsageUsed\",\"type\":\"long\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"peakUsageCommitted\",\"type\":\"long\"},{\"name\":\"usageUsed\",\"type\":\"long\"},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"usageCommitted\",\"type\":\"long\"}]}}},{\"name\":\"processCpuLoad\",\"type\":\"double\"},{\"name\":\"systemCpuLoad\",\"type\":\"double\"},{\"name\":\"processCpuTime\",\"type\":\"long\"},{\"name\":\"appId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"host\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"processUuid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"gc\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"gc\",\"fields\":[{\"name\":\"collectionTime\",\"type\":\"long\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"collectionCount\",\"type\":\"long\"}]}}}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<JVMMetrics> ENCODER =
      new BinaryMessageEncoder<JVMMetrics>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<JVMMetrics> DECODER =
      new BinaryMessageDecoder<JVMMetrics>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<JVMMetrics> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<JVMMetrics> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<JVMMetrics>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this JVMMetrics to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a JVMMetrics from a ByteBuffer. */
  public static JVMMetrics fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private double nonHeapMemoryTotalUsed;
   private java.util.List<com.jvmprofiler.bufferPools> bufferPools;
   private double heapMemoryTotalUsed;
   private long epochMillis;
   private double nonHeapMemoryCommitted;
   private double heapMemoryCommitted;
   private java.util.List<com.jvmprofiler.memoryPools> memoryPools;
   private double processCpuLoad;
   private double systemCpuLoad;
   private long processCpuTime;
   private java.lang.String appId;
   private java.lang.String name;
   private java.lang.String host;
   private java.lang.String processUuid;
   private java.util.List<com.jvmprofiler.gc> gc;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public JVMMetrics() {}

  /**
   * All-args constructor.
   * @param nonHeapMemoryTotalUsed The new value for nonHeapMemoryTotalUsed
   * @param bufferPools The new value for bufferPools
   * @param heapMemoryTotalUsed The new value for heapMemoryTotalUsed
   * @param epochMillis The new value for epochMillis
   * @param nonHeapMemoryCommitted The new value for nonHeapMemoryCommitted
   * @param heapMemoryCommitted The new value for heapMemoryCommitted
   * @param memoryPools The new value for memoryPools
   * @param processCpuLoad The new value for processCpuLoad
   * @param systemCpuLoad The new value for systemCpuLoad
   * @param processCpuTime The new value for processCpuTime
   * @param appId The new value for appId
   * @param name The new value for name
   * @param host The new value for host
   * @param processUuid The new value for processUuid
   * @param gc The new value for gc
   */
  public JVMMetrics(java.lang.Double nonHeapMemoryTotalUsed, java.util.List<com.jvmprofiler.bufferPools> bufferPools, java.lang.Double heapMemoryTotalUsed, java.lang.Long epochMillis, java.lang.Double nonHeapMemoryCommitted, java.lang.Double heapMemoryCommitted, java.util.List<com.jvmprofiler.memoryPools> memoryPools, java.lang.Double processCpuLoad, java.lang.Double systemCpuLoad, java.lang.Long processCpuTime, java.lang.String appId, java.lang.String name, java.lang.String host, java.lang.String processUuid, java.util.List<com.jvmprofiler.gc> gc) {
    this.nonHeapMemoryTotalUsed = nonHeapMemoryTotalUsed;
    this.bufferPools = bufferPools;
    this.heapMemoryTotalUsed = heapMemoryTotalUsed;
    this.epochMillis = epochMillis;
    this.nonHeapMemoryCommitted = nonHeapMemoryCommitted;
    this.heapMemoryCommitted = heapMemoryCommitted;
    this.memoryPools = memoryPools;
    this.processCpuLoad = processCpuLoad;
    this.systemCpuLoad = systemCpuLoad;
    this.processCpuTime = processCpuTime;
    this.appId = appId;
    this.name = name;
    this.host = host;
    this.processUuid = processUuid;
    this.gc = gc;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return nonHeapMemoryTotalUsed;
    case 1: return bufferPools;
    case 2: return heapMemoryTotalUsed;
    case 3: return epochMillis;
    case 4: return nonHeapMemoryCommitted;
    case 5: return heapMemoryCommitted;
    case 6: return memoryPools;
    case 7: return processCpuLoad;
    case 8: return systemCpuLoad;
    case 9: return processCpuTime;
    case 10: return appId;
    case 11: return name;
    case 12: return host;
    case 13: return processUuid;
    case 14: return gc;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: nonHeapMemoryTotalUsed = (java.lang.Double)value$; break;
    case 1: bufferPools = (java.util.List<com.jvmprofiler.bufferPools>)value$; break;
    case 2: heapMemoryTotalUsed = (java.lang.Double)value$; break;
    case 3: epochMillis = (java.lang.Long)value$; break;
    case 4: nonHeapMemoryCommitted = (java.lang.Double)value$; break;
    case 5: heapMemoryCommitted = (java.lang.Double)value$; break;
    case 6: memoryPools = (java.util.List<com.jvmprofiler.memoryPools>)value$; break;
    case 7: processCpuLoad = (java.lang.Double)value$; break;
    case 8: systemCpuLoad = (java.lang.Double)value$; break;
    case 9: processCpuTime = (java.lang.Long)value$; break;
    case 10: appId = (java.lang.String)value$; break;
    case 11: name = (java.lang.String)value$; break;
    case 12: host = (java.lang.String)value$; break;
    case 13: processUuid = (java.lang.String)value$; break;
    case 14: gc = (java.util.List<com.jvmprofiler.gc>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'nonHeapMemoryTotalUsed' field.
   * @return The value of the 'nonHeapMemoryTotalUsed' field.
   */
  public java.lang.Double getNonHeapMemoryTotalUsed() {
    return nonHeapMemoryTotalUsed;
  }


  /**
   * Gets the value of the 'bufferPools' field.
   * @return The value of the 'bufferPools' field.
   */
  public java.util.List<com.jvmprofiler.bufferPools> getBufferPools() {
    return bufferPools;
  }


  /**
   * Gets the value of the 'heapMemoryTotalUsed' field.
   * @return The value of the 'heapMemoryTotalUsed' field.
   */
  public java.lang.Double getHeapMemoryTotalUsed() {
    return heapMemoryTotalUsed;
  }


  /**
   * Gets the value of the 'epochMillis' field.
   * @return The value of the 'epochMillis' field.
   */
  public java.lang.Long getEpochMillis() {
    return epochMillis;
  }


  /**
   * Gets the value of the 'nonHeapMemoryCommitted' field.
   * @return The value of the 'nonHeapMemoryCommitted' field.
   */
  public java.lang.Double getNonHeapMemoryCommitted() {
    return nonHeapMemoryCommitted;
  }


  /**
   * Gets the value of the 'heapMemoryCommitted' field.
   * @return The value of the 'heapMemoryCommitted' field.
   */
  public java.lang.Double getHeapMemoryCommitted() {
    return heapMemoryCommitted;
  }


  /**
   * Gets the value of the 'memoryPools' field.
   * @return The value of the 'memoryPools' field.
   */
  public java.util.List<com.jvmprofiler.memoryPools> getMemoryPools() {
    return memoryPools;
  }


  /**
   * Gets the value of the 'processCpuLoad' field.
   * @return The value of the 'processCpuLoad' field.
   */
  public java.lang.Double getProcessCpuLoad() {
    return processCpuLoad;
  }


  /**
   * Gets the value of the 'systemCpuLoad' field.
   * @return The value of the 'systemCpuLoad' field.
   */
  public java.lang.Double getSystemCpuLoad() {
    return systemCpuLoad;
  }


  /**
   * Gets the value of the 'processCpuTime' field.
   * @return The value of the 'processCpuTime' field.
   */
  public java.lang.Long getProcessCpuTime() {
    return processCpuTime;
  }


  /**
   * Gets the value of the 'appId' field.
   * @return The value of the 'appId' field.
   */
  public java.lang.String getAppId() {
    return appId;
  }


  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Gets the value of the 'host' field.
   * @return The value of the 'host' field.
   */
  public java.lang.String getHost() {
    return host;
  }


  /**
   * Gets the value of the 'processUuid' field.
   * @return The value of the 'processUuid' field.
   */
  public java.lang.String getProcessUuid() {
    return processUuid;
  }


  /**
   * Gets the value of the 'gc' field.
   * @return The value of the 'gc' field.
   */
  public java.util.List<com.jvmprofiler.gc> getGc() {
    return gc;
  }


  /**
   * Creates a new JVMMetrics RecordBuilder.
   * @return A new JVMMetrics RecordBuilder
   */
  public static com.jvmprofiler.JVMMetrics.Builder newBuilder() {
    return new com.jvmprofiler.JVMMetrics.Builder();
  }

  /**
   * Creates a new JVMMetrics RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new JVMMetrics RecordBuilder
   */
  public static com.jvmprofiler.JVMMetrics.Builder newBuilder(com.jvmprofiler.JVMMetrics.Builder other) {
    return new com.jvmprofiler.JVMMetrics.Builder(other);
  }

  /**
   * Creates a new JVMMetrics RecordBuilder by copying an existing JVMMetrics instance.
   * @param other The existing instance to copy.
   * @return A new JVMMetrics RecordBuilder
   */
  public static com.jvmprofiler.JVMMetrics.Builder newBuilder(com.jvmprofiler.JVMMetrics other) {
    return new com.jvmprofiler.JVMMetrics.Builder(other);
  }

  /**
   * RecordBuilder for JVMMetrics instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<JVMMetrics>
    implements org.apache.avro.data.RecordBuilder<JVMMetrics> {

    private double nonHeapMemoryTotalUsed;
    private java.util.List<com.jvmprofiler.bufferPools> bufferPools;
    private double heapMemoryTotalUsed;
    private long epochMillis;
    private double nonHeapMemoryCommitted;
    private double heapMemoryCommitted;
    private java.util.List<com.jvmprofiler.memoryPools> memoryPools;
    private double processCpuLoad;
    private double systemCpuLoad;
    private long processCpuTime;
    private java.lang.String appId;
    private java.lang.String name;
    private java.lang.String host;
    private java.lang.String processUuid;
    private java.util.List<com.jvmprofiler.gc> gc;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.jvmprofiler.JVMMetrics.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.nonHeapMemoryTotalUsed)) {
        this.nonHeapMemoryTotalUsed = data().deepCopy(fields()[0].schema(), other.nonHeapMemoryTotalUsed);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bufferPools)) {
        this.bufferPools = data().deepCopy(fields()[1].schema(), other.bufferPools);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.heapMemoryTotalUsed)) {
        this.heapMemoryTotalUsed = data().deepCopy(fields()[2].schema(), other.heapMemoryTotalUsed);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.epochMillis)) {
        this.epochMillis = data().deepCopy(fields()[3].schema(), other.epochMillis);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.nonHeapMemoryCommitted)) {
        this.nonHeapMemoryCommitted = data().deepCopy(fields()[4].schema(), other.nonHeapMemoryCommitted);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.heapMemoryCommitted)) {
        this.heapMemoryCommitted = data().deepCopy(fields()[5].schema(), other.heapMemoryCommitted);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.memoryPools)) {
        this.memoryPools = data().deepCopy(fields()[6].schema(), other.memoryPools);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.processCpuLoad)) {
        this.processCpuLoad = data().deepCopy(fields()[7].schema(), other.processCpuLoad);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.systemCpuLoad)) {
        this.systemCpuLoad = data().deepCopy(fields()[8].schema(), other.systemCpuLoad);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.processCpuTime)) {
        this.processCpuTime = data().deepCopy(fields()[9].schema(), other.processCpuTime);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.appId)) {
        this.appId = data().deepCopy(fields()[10].schema(), other.appId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.name)) {
        this.name = data().deepCopy(fields()[11].schema(), other.name);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.host)) {
        this.host = data().deepCopy(fields()[12].schema(), other.host);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.processUuid)) {
        this.processUuid = data().deepCopy(fields()[13].schema(), other.processUuid);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.gc)) {
        this.gc = data().deepCopy(fields()[14].schema(), other.gc);
        fieldSetFlags()[14] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing JVMMetrics instance
     * @param other The existing instance to copy.
     */
    private Builder(com.jvmprofiler.JVMMetrics other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.nonHeapMemoryTotalUsed)) {
        this.nonHeapMemoryTotalUsed = data().deepCopy(fields()[0].schema(), other.nonHeapMemoryTotalUsed);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bufferPools)) {
        this.bufferPools = data().deepCopy(fields()[1].schema(), other.bufferPools);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.heapMemoryTotalUsed)) {
        this.heapMemoryTotalUsed = data().deepCopy(fields()[2].schema(), other.heapMemoryTotalUsed);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.epochMillis)) {
        this.epochMillis = data().deepCopy(fields()[3].schema(), other.epochMillis);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.nonHeapMemoryCommitted)) {
        this.nonHeapMemoryCommitted = data().deepCopy(fields()[4].schema(), other.nonHeapMemoryCommitted);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.heapMemoryCommitted)) {
        this.heapMemoryCommitted = data().deepCopy(fields()[5].schema(), other.heapMemoryCommitted);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.memoryPools)) {
        this.memoryPools = data().deepCopy(fields()[6].schema(), other.memoryPools);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.processCpuLoad)) {
        this.processCpuLoad = data().deepCopy(fields()[7].schema(), other.processCpuLoad);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.systemCpuLoad)) {
        this.systemCpuLoad = data().deepCopy(fields()[8].schema(), other.systemCpuLoad);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.processCpuTime)) {
        this.processCpuTime = data().deepCopy(fields()[9].schema(), other.processCpuTime);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.appId)) {
        this.appId = data().deepCopy(fields()[10].schema(), other.appId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.name)) {
        this.name = data().deepCopy(fields()[11].schema(), other.name);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.host)) {
        this.host = data().deepCopy(fields()[12].schema(), other.host);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.processUuid)) {
        this.processUuid = data().deepCopy(fields()[13].schema(), other.processUuid);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.gc)) {
        this.gc = data().deepCopy(fields()[14].schema(), other.gc);
        fieldSetFlags()[14] = true;
      }
    }

    /**
      * Gets the value of the 'nonHeapMemoryTotalUsed' field.
      * @return The value.
      */
    public java.lang.Double getNonHeapMemoryTotalUsed() {
      return nonHeapMemoryTotalUsed;
    }

    /**
      * Sets the value of the 'nonHeapMemoryTotalUsed' field.
      * @param value The value of 'nonHeapMemoryTotalUsed'.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder setNonHeapMemoryTotalUsed(double value) {
      validate(fields()[0], value);
      this.nonHeapMemoryTotalUsed = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'nonHeapMemoryTotalUsed' field has been set.
      * @return True if the 'nonHeapMemoryTotalUsed' field has been set, false otherwise.
      */
    public boolean hasNonHeapMemoryTotalUsed() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'nonHeapMemoryTotalUsed' field.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder clearNonHeapMemoryTotalUsed() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'bufferPools' field.
      * @return The value.
      */
    public java.util.List<com.jvmprofiler.bufferPools> getBufferPools() {
      return bufferPools;
    }

    /**
      * Sets the value of the 'bufferPools' field.
      * @param value The value of 'bufferPools'.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder setBufferPools(java.util.List<com.jvmprofiler.bufferPools> value) {
      validate(fields()[1], value);
      this.bufferPools = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'bufferPools' field has been set.
      * @return True if the 'bufferPools' field has been set, false otherwise.
      */
    public boolean hasBufferPools() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'bufferPools' field.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder clearBufferPools() {
      bufferPools = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'heapMemoryTotalUsed' field.
      * @return The value.
      */
    public java.lang.Double getHeapMemoryTotalUsed() {
      return heapMemoryTotalUsed;
    }

    /**
      * Sets the value of the 'heapMemoryTotalUsed' field.
      * @param value The value of 'heapMemoryTotalUsed'.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder setHeapMemoryTotalUsed(double value) {
      validate(fields()[2], value);
      this.heapMemoryTotalUsed = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'heapMemoryTotalUsed' field has been set.
      * @return True if the 'heapMemoryTotalUsed' field has been set, false otherwise.
      */
    public boolean hasHeapMemoryTotalUsed() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'heapMemoryTotalUsed' field.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder clearHeapMemoryTotalUsed() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'epochMillis' field.
      * @return The value.
      */
    public java.lang.Long getEpochMillis() {
      return epochMillis;
    }

    /**
      * Sets the value of the 'epochMillis' field.
      * @param value The value of 'epochMillis'.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder setEpochMillis(long value) {
      validate(fields()[3], value);
      this.epochMillis = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'epochMillis' field has been set.
      * @return True if the 'epochMillis' field has been set, false otherwise.
      */
    public boolean hasEpochMillis() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'epochMillis' field.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder clearEpochMillis() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'nonHeapMemoryCommitted' field.
      * @return The value.
      */
    public java.lang.Double getNonHeapMemoryCommitted() {
      return nonHeapMemoryCommitted;
    }

    /**
      * Sets the value of the 'nonHeapMemoryCommitted' field.
      * @param value The value of 'nonHeapMemoryCommitted'.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder setNonHeapMemoryCommitted(double value) {
      validate(fields()[4], value);
      this.nonHeapMemoryCommitted = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'nonHeapMemoryCommitted' field has been set.
      * @return True if the 'nonHeapMemoryCommitted' field has been set, false otherwise.
      */
    public boolean hasNonHeapMemoryCommitted() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'nonHeapMemoryCommitted' field.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder clearNonHeapMemoryCommitted() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'heapMemoryCommitted' field.
      * @return The value.
      */
    public java.lang.Double getHeapMemoryCommitted() {
      return heapMemoryCommitted;
    }

    /**
      * Sets the value of the 'heapMemoryCommitted' field.
      * @param value The value of 'heapMemoryCommitted'.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder setHeapMemoryCommitted(double value) {
      validate(fields()[5], value);
      this.heapMemoryCommitted = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'heapMemoryCommitted' field has been set.
      * @return True if the 'heapMemoryCommitted' field has been set, false otherwise.
      */
    public boolean hasHeapMemoryCommitted() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'heapMemoryCommitted' field.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder clearHeapMemoryCommitted() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'memoryPools' field.
      * @return The value.
      */
    public java.util.List<com.jvmprofiler.memoryPools> getMemoryPools() {
      return memoryPools;
    }

    /**
      * Sets the value of the 'memoryPools' field.
      * @param value The value of 'memoryPools'.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder setMemoryPools(java.util.List<com.jvmprofiler.memoryPools> value) {
      validate(fields()[6], value);
      this.memoryPools = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'memoryPools' field has been set.
      * @return True if the 'memoryPools' field has been set, false otherwise.
      */
    public boolean hasMemoryPools() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'memoryPools' field.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder clearMemoryPools() {
      memoryPools = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'processCpuLoad' field.
      * @return The value.
      */
    public java.lang.Double getProcessCpuLoad() {
      return processCpuLoad;
    }

    /**
      * Sets the value of the 'processCpuLoad' field.
      * @param value The value of 'processCpuLoad'.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder setProcessCpuLoad(double value) {
      validate(fields()[7], value);
      this.processCpuLoad = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'processCpuLoad' field has been set.
      * @return True if the 'processCpuLoad' field has been set, false otherwise.
      */
    public boolean hasProcessCpuLoad() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'processCpuLoad' field.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder clearProcessCpuLoad() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'systemCpuLoad' field.
      * @return The value.
      */
    public java.lang.Double getSystemCpuLoad() {
      return systemCpuLoad;
    }

    /**
      * Sets the value of the 'systemCpuLoad' field.
      * @param value The value of 'systemCpuLoad'.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder setSystemCpuLoad(double value) {
      validate(fields()[8], value);
      this.systemCpuLoad = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'systemCpuLoad' field has been set.
      * @return True if the 'systemCpuLoad' field has been set, false otherwise.
      */
    public boolean hasSystemCpuLoad() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'systemCpuLoad' field.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder clearSystemCpuLoad() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'processCpuTime' field.
      * @return The value.
      */
    public java.lang.Long getProcessCpuTime() {
      return processCpuTime;
    }

    /**
      * Sets the value of the 'processCpuTime' field.
      * @param value The value of 'processCpuTime'.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder setProcessCpuTime(long value) {
      validate(fields()[9], value);
      this.processCpuTime = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'processCpuTime' field has been set.
      * @return True if the 'processCpuTime' field has been set, false otherwise.
      */
    public boolean hasProcessCpuTime() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'processCpuTime' field.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder clearProcessCpuTime() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'appId' field.
      * @return The value.
      */
    public java.lang.String getAppId() {
      return appId;
    }

    /**
      * Sets the value of the 'appId' field.
      * @param value The value of 'appId'.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder setAppId(java.lang.String value) {
      validate(fields()[10], value);
      this.appId = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'appId' field has been set.
      * @return True if the 'appId' field has been set, false otherwise.
      */
    public boolean hasAppId() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'appId' field.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder clearAppId() {
      appId = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder setName(java.lang.String value) {
      validate(fields()[11], value);
      this.name = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder clearName() {
      name = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'host' field.
      * @return The value.
      */
    public java.lang.String getHost() {
      return host;
    }

    /**
      * Sets the value of the 'host' field.
      * @param value The value of 'host'.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder setHost(java.lang.String value) {
      validate(fields()[12], value);
      this.host = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'host' field has been set.
      * @return True if the 'host' field has been set, false otherwise.
      */
    public boolean hasHost() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'host' field.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder clearHost() {
      host = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'processUuid' field.
      * @return The value.
      */
    public java.lang.String getProcessUuid() {
      return processUuid;
    }

    /**
      * Sets the value of the 'processUuid' field.
      * @param value The value of 'processUuid'.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder setProcessUuid(java.lang.String value) {
      validate(fields()[13], value);
      this.processUuid = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'processUuid' field has been set.
      * @return True if the 'processUuid' field has been set, false otherwise.
      */
    public boolean hasProcessUuid() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'processUuid' field.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder clearProcessUuid() {
      processUuid = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'gc' field.
      * @return The value.
      */
    public java.util.List<com.jvmprofiler.gc> getGc() {
      return gc;
    }

    /**
      * Sets the value of the 'gc' field.
      * @param value The value of 'gc'.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder setGc(java.util.List<com.jvmprofiler.gc> value) {
      validate(fields()[14], value);
      this.gc = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'gc' field has been set.
      * @return True if the 'gc' field has been set, false otherwise.
      */
    public boolean hasGc() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'gc' field.
      * @return This builder.
      */
    public com.jvmprofiler.JVMMetrics.Builder clearGc() {
      gc = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public JVMMetrics build() {
      try {
        JVMMetrics record = new JVMMetrics();
        record.nonHeapMemoryTotalUsed = fieldSetFlags()[0] ? this.nonHeapMemoryTotalUsed : (java.lang.Double) defaultValue(fields()[0]);
        record.bufferPools = fieldSetFlags()[1] ? this.bufferPools : (java.util.List<com.jvmprofiler.bufferPools>) defaultValue(fields()[1]);
        record.heapMemoryTotalUsed = fieldSetFlags()[2] ? this.heapMemoryTotalUsed : (java.lang.Double) defaultValue(fields()[2]);
        record.epochMillis = fieldSetFlags()[3] ? this.epochMillis : (java.lang.Long) defaultValue(fields()[3]);
        record.nonHeapMemoryCommitted = fieldSetFlags()[4] ? this.nonHeapMemoryCommitted : (java.lang.Double) defaultValue(fields()[4]);
        record.heapMemoryCommitted = fieldSetFlags()[5] ? this.heapMemoryCommitted : (java.lang.Double) defaultValue(fields()[5]);
        record.memoryPools = fieldSetFlags()[6] ? this.memoryPools : (java.util.List<com.jvmprofiler.memoryPools>) defaultValue(fields()[6]);
        record.processCpuLoad = fieldSetFlags()[7] ? this.processCpuLoad : (java.lang.Double) defaultValue(fields()[7]);
        record.systemCpuLoad = fieldSetFlags()[8] ? this.systemCpuLoad : (java.lang.Double) defaultValue(fields()[8]);
        record.processCpuTime = fieldSetFlags()[9] ? this.processCpuTime : (java.lang.Long) defaultValue(fields()[9]);
        record.appId = fieldSetFlags()[10] ? this.appId : (java.lang.String) defaultValue(fields()[10]);
        record.name = fieldSetFlags()[11] ? this.name : (java.lang.String) defaultValue(fields()[11]);
        record.host = fieldSetFlags()[12] ? this.host : (java.lang.String) defaultValue(fields()[12]);
        record.processUuid = fieldSetFlags()[13] ? this.processUuid : (java.lang.String) defaultValue(fields()[13]);
        record.gc = fieldSetFlags()[14] ? this.gc : (java.util.List<com.jvmprofiler.gc>) defaultValue(fields()[14]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<JVMMetrics>
    WRITER$ = (org.apache.avro.io.DatumWriter<JVMMetrics>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<JVMMetrics>
    READER$ = (org.apache.avro.io.DatumReader<JVMMetrics>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
