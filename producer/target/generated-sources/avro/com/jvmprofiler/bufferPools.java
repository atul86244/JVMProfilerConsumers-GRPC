/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.jvmprofiler;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class bufferPools extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5016395807066683169L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"bufferPools\",\"namespace\":\"com.jvmprofiler\",\"fields\":[{\"name\":\"totalCapacity\",\"type\":\"long\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"count\",\"type\":\"long\"},{\"name\":\"memoryUsed\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<bufferPools> ENCODER =
      new BinaryMessageEncoder<bufferPools>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<bufferPools> DECODER =
      new BinaryMessageDecoder<bufferPools>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<bufferPools> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<bufferPools> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<bufferPools>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this bufferPools to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a bufferPools from a ByteBuffer. */
  public static bufferPools fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long totalCapacity;
   private java.lang.String name;
   private long count;
   private long memoryUsed;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public bufferPools() {}

  /**
   * All-args constructor.
   * @param totalCapacity The new value for totalCapacity
   * @param name The new value for name
   * @param count The new value for count
   * @param memoryUsed The new value for memoryUsed
   */
  public bufferPools(java.lang.Long totalCapacity, java.lang.String name, java.lang.Long count, java.lang.Long memoryUsed) {
    this.totalCapacity = totalCapacity;
    this.name = name;
    this.count = count;
    this.memoryUsed = memoryUsed;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return totalCapacity;
    case 1: return name;
    case 2: return count;
    case 3: return memoryUsed;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: totalCapacity = (java.lang.Long)value$; break;
    case 1: name = (java.lang.String)value$; break;
    case 2: count = (java.lang.Long)value$; break;
    case 3: memoryUsed = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'totalCapacity' field.
   * @return The value of the 'totalCapacity' field.
   */
  public java.lang.Long getTotalCapacity() {
    return totalCapacity;
  }


  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Gets the value of the 'count' field.
   * @return The value of the 'count' field.
   */
  public java.lang.Long getCount() {
    return count;
  }


  /**
   * Gets the value of the 'memoryUsed' field.
   * @return The value of the 'memoryUsed' field.
   */
  public java.lang.Long getMemoryUsed() {
    return memoryUsed;
  }


  /**
   * Creates a new bufferPools RecordBuilder.
   * @return A new bufferPools RecordBuilder
   */
  public static com.jvmprofiler.bufferPools.Builder newBuilder() {
    return new com.jvmprofiler.bufferPools.Builder();
  }

  /**
   * Creates a new bufferPools RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new bufferPools RecordBuilder
   */
  public static com.jvmprofiler.bufferPools.Builder newBuilder(com.jvmprofiler.bufferPools.Builder other) {
    return new com.jvmprofiler.bufferPools.Builder(other);
  }

  /**
   * Creates a new bufferPools RecordBuilder by copying an existing bufferPools instance.
   * @param other The existing instance to copy.
   * @return A new bufferPools RecordBuilder
   */
  public static com.jvmprofiler.bufferPools.Builder newBuilder(com.jvmprofiler.bufferPools other) {
    return new com.jvmprofiler.bufferPools.Builder(other);
  }

  /**
   * RecordBuilder for bufferPools instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<bufferPools>
    implements org.apache.avro.data.RecordBuilder<bufferPools> {

    private long totalCapacity;
    private java.lang.String name;
    private long count;
    private long memoryUsed;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.jvmprofiler.bufferPools.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.totalCapacity)) {
        this.totalCapacity = data().deepCopy(fields()[0].schema(), other.totalCapacity);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.count)) {
        this.count = data().deepCopy(fields()[2].schema(), other.count);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.memoryUsed)) {
        this.memoryUsed = data().deepCopy(fields()[3].schema(), other.memoryUsed);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing bufferPools instance
     * @param other The existing instance to copy.
     */
    private Builder(com.jvmprofiler.bufferPools other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.totalCapacity)) {
        this.totalCapacity = data().deepCopy(fields()[0].schema(), other.totalCapacity);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.count)) {
        this.count = data().deepCopy(fields()[2].schema(), other.count);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.memoryUsed)) {
        this.memoryUsed = data().deepCopy(fields()[3].schema(), other.memoryUsed);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'totalCapacity' field.
      * @return The value.
      */
    public java.lang.Long getTotalCapacity() {
      return totalCapacity;
    }

    /**
      * Sets the value of the 'totalCapacity' field.
      * @param value The value of 'totalCapacity'.
      * @return This builder.
      */
    public com.jvmprofiler.bufferPools.Builder setTotalCapacity(long value) {
      validate(fields()[0], value);
      this.totalCapacity = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'totalCapacity' field has been set.
      * @return True if the 'totalCapacity' field has been set, false otherwise.
      */
    public boolean hasTotalCapacity() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'totalCapacity' field.
      * @return This builder.
      */
    public com.jvmprofiler.bufferPools.Builder clearTotalCapacity() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.jvmprofiler.bufferPools.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.jvmprofiler.bufferPools.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'count' field.
      * @return The value.
      */
    public java.lang.Long getCount() {
      return count;
    }

    /**
      * Sets the value of the 'count' field.
      * @param value The value of 'count'.
      * @return This builder.
      */
    public com.jvmprofiler.bufferPools.Builder setCount(long value) {
      validate(fields()[2], value);
      this.count = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'count' field has been set.
      * @return True if the 'count' field has been set, false otherwise.
      */
    public boolean hasCount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'count' field.
      * @return This builder.
      */
    public com.jvmprofiler.bufferPools.Builder clearCount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'memoryUsed' field.
      * @return The value.
      */
    public java.lang.Long getMemoryUsed() {
      return memoryUsed;
    }

    /**
      * Sets the value of the 'memoryUsed' field.
      * @param value The value of 'memoryUsed'.
      * @return This builder.
      */
    public com.jvmprofiler.bufferPools.Builder setMemoryUsed(long value) {
      validate(fields()[3], value);
      this.memoryUsed = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'memoryUsed' field has been set.
      * @return True if the 'memoryUsed' field has been set, false otherwise.
      */
    public boolean hasMemoryUsed() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'memoryUsed' field.
      * @return This builder.
      */
    public com.jvmprofiler.bufferPools.Builder clearMemoryUsed() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public bufferPools build() {
      try {
        bufferPools record = new bufferPools();
        record.totalCapacity = fieldSetFlags()[0] ? this.totalCapacity : (java.lang.Long) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        record.count = fieldSetFlags()[2] ? this.count : (java.lang.Long) defaultValue(fields()[2]);
        record.memoryUsed = fieldSetFlags()[3] ? this.memoryUsed : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<bufferPools>
    WRITER$ = (org.apache.avro.io.DatumWriter<bufferPools>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<bufferPools>
    READER$ = (org.apache.avro.io.DatumReader<bufferPools>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
